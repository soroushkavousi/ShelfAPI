using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Linq.Expressions;
using System.Reflection;

namespace ShelfApi.Infrastructure.Extensions;

public static class SqlConfigurationExtensions
{
    public static void SetOrderForAllProperties<T>(this EntityTypeBuilder<T> builder, int startOrderNumber = 100) where T : class
    {
        var properties = builder.Metadata.ClrType
            .GetProperties(BindingFlags.Public | BindingFlags.Instance)
            .Select(x => x.Name)
            .ToList();

        foreach (var property in properties)
        {
            builder.Property(property).HasColumnOrder(startOrderNumber);
            startOrderNumber++;
        }
    }

    public static PropertyBuilder<object> ConfigureKey<TEntity>(this EntityTypeBuilder<TEntity> builder, Expression<Func<TEntity, object>> keyExpression, bool autoGenerated = false) where TEntity : class
    {
        builder.HasKey(keyExpression);

        PropertyBuilder<object> property = builder.Property(keyExpression)
            .HasColumnOrder(1);

        if (autoGenerated)
            property.ValueGeneratedOnAdd();
        else
            property.ValueGeneratedNever();

        return property;
    }

    public static PropertyBuilder ConfigureCreatedAt(this PropertyBuilder propertyBuilder)
        => propertyBuilder
            .IsRequired(true)
            .HasColumnOrder(1000)
            .HasDefaultValueSql("SYSUTCDATETIME()");

    public static PropertyBuilder<TProperty> ConfigureCreatedAt<TProperty>(this PropertyBuilder<TProperty> propertyBuilder)
    {
        ((PropertyBuilder)propertyBuilder)
            .ConfigureCreatedAt();

        return propertyBuilder;
    }

    public static PropertyBuilder ConfigureModifiedAt(this PropertyBuilder propertyBuilder)
        => propertyBuilder
            .HasColumnOrder(1001)
            .IsRequired(false);

    public static PropertyBuilder<TProperty> ConfigureModifiedAt<TProperty>(this PropertyBuilder<TProperty> propertyBuilder)
    {
        ((PropertyBuilder)propertyBuilder)
            .ConfigureModifiedAt();

        return propertyBuilder;
    }

    public static PropertyBuilder<TProperty> CaseSensitive<TProperty>(this PropertyBuilder<TProperty> propertyBuilder)
    {
        propertyBuilder.UseCollation(Common.Constants.CaseSensitiveCollation);
        return propertyBuilder;
    }

    public static PropertyBuilder<TProperty> CaseInsensitive<TProperty>(this PropertyBuilder<TProperty> propertyBuilder)
    {
        propertyBuilder.UseCollation(Common.Constants.CaseInsensitiveCollation);
        return propertyBuilder;
    }
}